@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@model List<EMS_App.Models.Ticket>
@{
    ViewData["Title"] = "Checkout";
}
<script language="javascript" type="text/javascript">
    // Example starter JavaScript for disabling form submissions if there are invalid fields
    (function () {
        'use strict'

        // Fetch all the forms we want to apply custom Bootstrap validation styles to
        var forms = document.querySelectorAll('.needs-validation')

        // Loop over them and prevent submission
        Array.prototype.slice.call(forms)
            .forEach(function (form) {
                form.addEventListener('submit', function (event) {
                    if (!form.checkValidity()) {
                        event.preventDefault()
                        event.stopPropagation()
                    }

                    form.classList.add('was-validated')
                }, false)
            })
    })()
</script>
<div class="container">
    <div class="container-fluid py-5">
        <h1 class="display-5 fw-bold">Checkout</h1>
    </div>
    
    <div class="row g-5">
        <div class="col-md-5 col-lg-4 order-md-last">
            <h4 class="d-flex justify-content-between align-items-center mb-3">
                <span>Your cart</span>
            </h4>
            <ul class="list-group mb-3">
                @{int price = 0;}
                @for (var j = 0; j < Model.Count; j++)
                {
                    if (Model[j].Quantity == 0)
                        continue;
                    <li class="list-group-item d-flex justify-content-between lh-sm">
                        <div>
                            <h6 class="my-0">@Html.DisplayFor(modelItem => Model[j].Type)</h6>
                            <small class="text-body-secondary">Quantity: @Html.DisplayFor(modelItem => Model[j].Quantity)</small>
                        </div>
                        <span class="text-body-secondary">$@Html.DisplayFor(modelItem => Model[j].Price)</span>
                    </li>
                    price += Model[j].Price * Model[j].Quantity;
                }
                
                <li class="list-group-item d-flex justify-content-between">
                    <span>Total (CAD)</span>
                    <strong>$@String.Format("{0:0,0}",price) </strong>
                </li>
            </ul>
        </div>
        <div class="col-md-7 col-lg-8">
            <h4 class="mb-3">Billing address</h4>
            <form class="needs-validation" novalidate>
                <div class="row g-3">
                    <div class="col-sm-6">
                        <label for="firstName" class="form-label">First name</label>
                        <input type="text" class="form-control" id="firstName" placeholder="" required />
                        <div class="invalid-feedback">
                            Valid first name is required.
                        </div>
                    </div>
                </div>
            </form>
            <hr class="my-4" />

            <button class="w-100 btn btn-outline-secondary" type="submit">Continue to checkout</button>
        </div>
    </div>
</div>